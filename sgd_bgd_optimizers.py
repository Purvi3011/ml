# -*- coding: utf-8 -*-
"""SGD_BGD_Optimizers.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Arl26cit_9n-WmO6uSXGsw5D5RBcg0-Y

**QUESTION 8**
"""

import math
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

def sigmoid(Y_in):
    return 1 / (1 + np.exp(-Y_in))

def find_Yhat(X, w, b):
    # IF LIST OF LIST / LIST OF TUPLE IS USED, THEN INDIVIDUAL LIST/TUPLE SHOULD BE HANDLED DIFFERENTLY
    if type(X) in [type([1]), type((1,2))]:
        Y_in = np.dot(X, w) + b
    else:
        Y_in = X * w + b

    return sigmoid(Y_in)

def delta_w(X, Y_true, Y_pred):
  return -2 * (Y_true - Y_pred) * Y_pred * (1 - Y_pred) * X

def delta_b(Y_true, Y_pred):
  return -2 * (Y_true - Y_pred) * Y_pred * (1 - Y_pred)

X = [0.5, 2.5]
Y = [0.2, 0.9]

n_epochs = 300
df = pd.DataFrame([(x, y) for x, y in zip(X, Y)], columns = ['X', 'Y'])
df.head()

"""Stochastic gradient

"""

def stochastic_gradient_descent(X, Y, noofepochs = 300):
    w = -2; alpha = 1; b = -2;

    # LIST FOR ALL EPOCHS
    error_mega_list = []
    weights_mega_list = []
    bias_mega_list = []
        
    for i in range(noofepochs):
        # LIST FOR EACH EPOCH
        error_list = []

        for x, y in zip(X, Y):
            Y_hat = find_Yhat(x, w, b)
            error_list.append((y - Y_hat) ** 2)

            dw = delta_w(x, y, Y_hat)
            db = delta_b(y, Y_hat)
        
            w += (-alpha * dw)
            b += (-alpha * db)
        
        error_mega_list.append(error_list)
        weights_mega_list.append(w)
        bias_mega_list.append(b)
        
    return error_mega_list, weights_mega_list, bias_mega_list

errors_sgd, weights_sgd, biases_sgd = stochastic_gradient_descent(X, Y, n_epochs)

print(round(np.mean(errors_sgd[-1]),5))
print(round(weights_sgd[-1],3))
print(round(biases_sgd[-1],3))

print(errors_sgd)

plt.title("WEIGHT VS BIAS")
epoch_range = [i for i in weights_sgd]
weight_range = [w for w in biases_sgd]
plt.plot(epoch_range, weight_range)
plt.xlabel('weight ')
plt.ylabel('bias')
plt.show()

plt.title("WEIGHT VS EPOCHS")
epoch_range = [i for i in range(n_epochs)]
weight_range = [w for w in errors_sgd]
plt.plot(epoch_range, weight_range)
plt.xlabel('EPOCHS ')
plt.ylabel('WEIGHT')
plt.show()

"""Batch gradient descent

"""

def batch_gradient_descent(X, Y, noofepochs = 300):
    w = -2; alpha = 1; b = -2;
    dw, db = 0, 0

    # LIST FOR ALL EPOCHS
    error_mega_list = []
    weights_mega_list = []
    bias_mega_list = []
        
    for i in range(noofepochs):
        # LIST FOR EACH EPOCH
        error_list = []

        for x, y in zip(X, Y):
            Y_hat = find_Yhat(x, w, b)
            error_list.append((y - Y_hat) ** 2)

            dw += delta_w(x, y, Y_hat)
            db += delta_b(y, Y_hat)
        
        w += (-alpha * dw / len(X))
        b += (-alpha * db / len(X))
        
        dw, db = 0, 0
        
        error_mega_list.append(error_list)
        weights_mega_list.append(w)
        bias_mega_list.append(b)
       
       
        
        
    return error_mega_list, weights_mega_list, bias_mega_list

errors_bgd, weights_bgd, biases_bgd = batch_gradient_descent(X, Y, n_epochs)

print(round(np.mean(errors_bgd[-1]),5))
print(round(weights_bgd[-1],3))
print(round(biases_bgd[-1],3))

plt.title("WEIGHT VS EPOCHS")
epoch_range = [i for i in range(n_epochs)]
weight_range = [w for w in weights_bgd]
plt.plot(epoch_range, weight_range)
plt.xlabel('EPOCHS ')
plt.ylabel('WEIGHT')
plt.show()

epoch_range = [i for i in range(0, n_epochs + 1)]

plt.figure(figsize = (8, 8))
plt.xlabel("Epochs", fontsize = 14)
plt.ylabel("Weights", fontsize = 14)
plt.plot(epoch_range, [-2, *weights_bgd], color = 'orange')
plt.plot(epoch_range, [-2, *weights_sgd], color = 'grey')
plt.show()

plt.figure(figsize = (8, 8))
plt.xlabel("Epochs", fontsize = 14)
plt.ylabel("Bias", fontsize = 14)
plt.plot(epoch_range, [-2, *biases_bgd], color = 'orange')
plt.plot(epoch_range, [-2, *biases_sgd], color = 'grey')
plt.show()

epoch_range = [i for i in range(1, n_epochs+1)]
plt.figure(figsize = (8, 8))
plt.xlabel("Epochs", fontsize = 14)
plt.ylabel("Errors", fontsize = 14)
plt.plot(epoch_range, [np.mean(i) for i in errors_bgd], color = 'orange')
plt.plot(epoch_range, [np.mean(i) for i in errors_sgd], color = 'grey')
plt.show()

