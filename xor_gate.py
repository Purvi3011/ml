# -*- coding: utf-8 -*-
"""XOR_GATE.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wViUkf_UjQAOHjWk-bYi20lQXyfgNNDb
"""



import numpy as np
import pandas as pd

x1 = [0,1]
x2 = [[0,0],[0,1],[1,0],[1,1]]

gates = {}
gates['X'] = x2

"""**FUNCTIONS**"""

def activation(y_hat):
    if(y_hat>=0):
        return 1
    else:
        return 0

def perceptron(x,w,b):
    y = []
    for x_hat in x:
        # print(x_hat)
        xw = np.dot(x_hat,w) + b
        # print(xw)
        y.append(activation(xw))
    return y



"""**OR GATE**"""

def OR(x):
    w = [1,1]
    b = -1
    # print(x)
    return perceptron(x,w,b)

or_ = OR(x2)
gates['OR'] = or_
print('OR', or_)

"""**XOR GATE**"""

def XOR(x):
    w1 = [-1,1]
    b = -1
    # print(x)
    z1 = perceptron(x,w1,b)
    # print(z1)

    w2 = [1,-1]
    z2 = perceptron(x,w2,b)
    # print(z2)

    z = []
    for z1_hat, z2_hat in zip(z1,z2):
        z.append([z1_hat,z2_hat])
    # print(z)    
    # print(list(zip(z1,z2)))
    return OR(z)

xor = XOR(x2)
gates['XOR'] = xor
print('XOR', xor)

all_w = [[0,0],[0,1],[1,0],[1,1]]
all_b = [-1, -2, 0, 1, 2]

for w in all_w:
    for b in all_b:
        temp = perceptron(x2,w,b)
        if temp == xor:
            print(w, b, temp)

data = pd.DataFrame(gates)
print(data)

